n
value
s
value.next
value
 value or not value.next 
exit
n
s
n
exit
n
@head
s
a
n
a
n
a
n
node.data
node.next.data
n
node.data
n
node.data
n
node.next.data
n
node.data
n
node.next.data
node.next != nil
n
node.data
n
@head
s
n
a
n
find_tail.data
n
@head
s
n
a
n
find_tail.data
n
@head
s
n
3
n
a
n
a
n
exit
find_tail.data
n
@head
s
a
n
find_tail.next
n
find_tail.next = Node.new(value) unless value <= -1
find_tail.data
find_tail.next = Node.new(value) unless value <= -1
n
@head
s
n
a
n
exit
n
a
n
a
n
a
n
a
n
a
n
a
n
exit
s
n
a
n
a
n
a
n
a
n
a
n
a
n
s
n
exit
c
s
n
node.next.data
node.data
n
node.data
node.next.data
n
node.data
n
node.data unless node.data == nil
node.data
n
node.next.data
node.data
n
node.data unless node.data == nil
node.data
node
n
node.next.data
node.next
n
node.next != nil
node.data
n
@head
s
n
exit
n
s
n
exit
n
node.next != nil
n
node.next.data
node.data
n
s
n
s
n
@head
n
@head
n
exit
n
@head
s
c
n
s
n
exit
n
4
n
c
n
1
exit
n
m
n
find_tail.next = Node.new(value)
n
@head
s
n
s
n
@head
s
n
node.data
node
@head
n
@head
exit
2
exit
n
exit
@head
s
n
-1
n
exit
@head
s
n
exit
n
@head
n
list.append 
n
@head
n
@head
n
data
@head
n
m
n
exit
nexit
n
exit
n
node.data
node.next
n
c
n
c
n
c
n
node.next
node.data
n
c
n
node.next
n
node.data
n
node.data
c
n
node
exit
a
n
@head
@had
n
@head
n
